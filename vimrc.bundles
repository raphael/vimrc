" Make Vundle work so this file can be invoked directly to update
" bundles with:
" vim -u vimrc.bundles +BundleInstall! +BundleClean +qall
set nocompatible
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Deps
Bundle 'gmarik/vundle'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
if executable('ack-grep')
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
  Bundle 'mileszs/ack.vim'
elseif executable('ack')
  Bundle 'mileszs/ack.vim'
endif

" General
Bundle 'scrooloose/nerdtree'
let NERDTreeShowBookmarks=0
let NERDTreeShowHidden=0
let NERDTreeChDirMode=2 " Keep cwd in sync with tree root
let NERDTreeQuitOnOpen=0 " Do not close tree after opening a file
let g:nerdtree_tabs_open_on_gui_startup=1
map <leader>d :NERDTreeMirrorToggle<CR>
map <leader>f :NERDTreeFind<CR>

Bundle 'spf13/vim-colors'
Bundle 'tpope/vim-surround'
Bundle 'spf13/vim-autoclose'

Bundle 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode='ra' " Use parent directory with '.git' file as root (r) or current directory if none (a)
let g:ctrlp_custom_ignore="*.log" 
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f'
	\ }

Bundle 'vim-scripts/sessionman.vim'
Bundle 'matchit.zip'

Bundle 'Lokaltog/powerline'
python from powerline.bindings.vim import source_plugin; source_plugin()

Bundle 'Lokaltog/vim-easymotion'
Bundle 'godlygeek/csapprox'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'flazz/vim-colorschemes'

Bundle 'mbbill/undotree'
nnoremap <Leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1

Bundle 'myusuf3/numbers.vim'

Bundle 'nathanaelkane/vim-indent-guides'
let g:indent_guides_auto_colors = 1
" indent_guides
"let g:indent_guides_start_level = 2
""let g:indent_guides_guide_size = 1
let g:indent_guides_enable_on_vim_startup = 1

Bundle 'vim-scripts/restore_view.vim'
Bundle 'tpope/vim-abolish.git'

" Programming
Bundle 'scrooloose/syntastic'

Bundle 'tpope/vim-fugitive'
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

Bundle 'mattn/webapi-vim'

Bundle 'mattn/gist-vim'
let g:gist_detect_filetype = 1

Bundle 'scrooloose/nerdcommenter'
Bundle 'majutsushi/tagbar'

" Snippets & AutoComplete
Bundle 'Shougo/neocomplcache'
let g:acp_enableAtStartup = 0
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_camel_case_completion = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_enable_underbar_completion = 1
let g:neocomplcache_enable_auto_delimiter = 1
let g:neocomplcache_max_list = 15
let g:neocomplcache_force_overwrite_completefunc = 1
let g:neocomplcache_keyword_patterns = {}
let g:neocomplcache_keyword_patterns._ = '\h\w*'
inoremap <expr><C-g> neocomplcache#undo_completion()
inoremap <expr><C-l> neocomplcache#complete_common_string()
inoremap <expr><CR> neocomplcache#complete_common_string()
" <TAB>: completion
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<TAB>"
" <CR>: close popup
" <s-CR>: close popup and save indent
inoremap <expr><s-CR> pumvisible() ? neocomplcache#close_popup()"\<CR>" : "\<CR>"
inoremap <expr><CR> pumvisible() ? neocomplcache#close_popup() : "\<CR>"
" <C-h>, <BS>: close popup and delete backword char
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y> neocomplcache#close_popup()
let g:neocomplcache_omni_patterns = {}
let g:neocomplcache_omni_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
let g:neocomplcache_omni_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
let g:neocomplcache_omni_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'
let g:neocomplcache_omni_patterns.ruby = '[^. *\t]\.\h\w*\|\h\w*::'

Bundle 'Shougo/neosnippet'
imap <silent><expr><TAB> neosnippet#expandable() ?
            \ "\<Plug>(neosnippet_expand_or_jump)" : (pumvisible() ?
            \ "\<C-e>" : "\<TAB>")
smap <TAB> <Right><Plug>(neosnippet_jump_or_expand)
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
" For snippet_complete marker
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

Bundle 'honza/snipmate-snippets'
" Use honza's snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/snipmate-snippets/snippets'


" Pick either python-mode or pyflakes & pydoc
Bundle 'klen/python-mode'
Bundle 'python.vim'
Bundle 'python_match.vim'
Bundle 'pythoncomplete'

" Javascript
Bundle 'leshill/vim-json'
Bundle 'groenewege/vim-less'
Bundle 'pangloss/vim-javascript'
Bundle 'briancollins/vim-jst'
Bundle 'kchmck/vim-coffee-script'

" HTML
Bundle 'amirh/HTML-AutoCloseTag'
Bundle 'hail2u/vim-css3-syntax'

" Ruby
Bundle 'tpope/vim-rails'
let g:rubycomplete_buffer_loading = 1
"let g:rubycomplete_classes_in_global = 1
"let g:rubycomplete_rails = 1

" GO
Bundle 'fsouza/go.vim'
Bundle 'nsf/gocode'

" Node.js
Bundle 'digitaltoad/vim-jade'
Bundle 'myhere/vim-nodejs-complete'
Bundle 'guileen/vim-node'

" Misc
Bundle 'tpope/vim-markdown'
Bundle 'spf13/vim-preview'
Bundle 'tpope/vim-cucumber'
Bundle 'quentindecock/vim-cucumber-align-pipes'
Bundle 'Puppet-Syntax-Highlighting'
