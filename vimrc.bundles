" Make Vundle work so this file can be invoked directly to update
" bundles with:
" vim -u vimrc.bundles +BundleInstall! +BundleClean +qall
set nocompatible
filetype on
filetype off
set rtp+=~/.vim/bundle/vundle
call vundle#rc()

" Deps
Bundle 'gmarik/vundle'
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
if executable('ack-grep')
  let g:ackprg="ack-grep -H --nocolor --nogroup --column"
  Bundle 'mileszs/ack.vim'
elseif executable('ack')
  Bundle 'mileszs/ack.vim'
endif

" Status line
"set rtp+=~/.vim/bundle/powerline/powerline/bindings/vim
"Bundle 'Lokaltog/powerline'
source /usr/local/Cellar/git/1.7.9/lib/Python2.7/site-packages/powerline/bindings/vim/plugin/powerline.vim
""python from powerline.bindings.vim import powerline; powerline()

" General
Bundle 'scrooloose/nerdtree'
let NERDTreeShowBookmarks=0
let NERDTreeShowHidden=0
let NERDTreeChDirMode=2 " Keep cwd in sync with tree root
let NERDTreeQuitOnOpen=0 " Do not close tree after opening a file
let g:nerdtree_tabs_open_on_gui_startup=1
map <leader>d :NERDTreeMirrorToggle<CR>
map <leader>f :NERDTreeFind<CR>

Bundle 'spf13/vim-colors'
Bundle 'tpope/vim-surround'
Bundle 'spf13/vim-autoclose'

Bundle 'kien/ctrlp.vim'
let g:ctrlp_working_path_mode='ra' " Use parent directory with '.git' file as root (r) or current directory if none (a)
let g:ctrlp_custom_ignore="/\(.log$\|public\/\)"
let g:ctrlp_user_command = {
	\ 'types': {
		\ 1: ['.git', 'cd %s && git ls-files'],
		\ 2: ['.hg', 'hg --cwd %s locate -I .'],
		\ },
	\ 'fallback': 'find %s -type f'
	\ }

Bundle 'vim-scripts/sessionman.vim'
nmap <leader>ss :SessionSave<CR>
nmap <leader>so :SessionOpenLast<CR>
nmap <leader>sl :SessionList<CR>

Bundle 'matchit.zip'

Bundle 'Lokaltog/vim-easymotion'
Bundle 'godlygeek/csapprox'
Bundle 'jistr/vim-nerdtree-tabs'
Bundle 'flazz/vim-colorschemes'

Bundle 'mbbill/undotree'
nnoremap <Leader>u :UndotreeToggle<CR>
let g:undotree_SetFocusWhenToggle=1

Bundle 'myusuf3/numbers.vim'
Bundle 'tpope/vim-repeat'
Bundle 'vim-scripts/restore_view.vim'
Bundle 'tpope/vim-abolish.git'

" Syntax checking
Bundle 'scrooloose/syntastic'

" Commenting
Bundle 'scrooloose/nerdcommenter'

" Auto-completion
Bundle 'Shougo/neocomplcache'
" Launches neocomplcache automatically on vim startup.
let g:neocomplcache_enable_at_startup = 1
" Use smartcase.
let g:neocomplcache_enable_smart_case = 1
" Use camel case completion.
let g:neocomplcache_enable_camel_case_completion = 1
" Use underscore completion.
let g:neocomplcache_enable_underbar_completion = 1
" Sets minimum char length of syntax keyword.
let g:neocomplcache_min_syntax_length = 3
" buffer file name pattern that locks neocomplcache. e.g. ku.vim or fuzzyfinder 
let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'

" Plugin key-mappings.
imap <C-k>     <Plug>(neocomplcache_snippets_expand)
smap <C-k>     <Plug>(neocomplcache_snippets_expand)
inoremap <expr><C-g>     neocomplcache#undo_completion()
inoremap <expr><C-l>     neocomplcache#complete_common_string()
" SuperTab like snippets behavior.
imap <expr><TAB> neocomplcache#sources#snippets_complete#expandable() ? "\<Plug>(neocomplcache_snippets_expand)" : pumvisible() ? "\<C-n>" : "\<TAB>"

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <expr><CR>  neocomplcache#smart_close_popup() . "\<CR>"
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplcache#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplcache#close_popup()
inoremap <expr><C-e>  neocomplcache#cancel_popup()

" Git
Bundle 'tpope/vim-fugitive'
nnoremap <silent> <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>gd :Gdiff<CR>
nnoremap <silent> <leader>gc :Gcommit<CR>
nnoremap <silent> <leader>gb :Gblame<CR>
nnoremap <silent> <leader>gl :Glog<CR>
nnoremap <silent> <leader>gp :Git push<CR>

Bundle 'mattn/webapi-vim'

Bundle 'mattn/gist-vim'
let g:gist_detect_filetype = 1

Bundle 'majutsushi/tagbar'
" GO support (https://github.com/jstemmer/gotags)
let g:tagbar_type_go = {
  \ 'ctagstype' : 'go',
  \ 'kinds'     : [
    \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
  \ ],
  \ 'sro' : '.',
  \ 'kind2scope' : {
    \ 't' : 'ctype',
    \ 'n' : 'ntype'
  \ },
  \ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
  \ },
  \ 'ctagsbin'  : 'gotags',
  \ 'ctagsargs' : '-sort -silent'
\ }
" CoffeeScript support https://github.com/lukaszkorecki/CoffeeTags
if executable('coffeetags')
  let g:tagbar_type_coffee = {
    \ 'ctagsbin' : 'coffeetags',
    \ 'ctagsargs' : '',
    \ 'kinds' : [
    \ 'f:functions',
    \ 'o:object',
    \ ],
    \ 'sro' : ".",
    \ 'kind2scope' : {
    \ 'f' : 'object',
    \ 'o' : 'object',
    \ }
  \ }
endif

" Pick either python-mode or pyflakes & pydoc
Bundle 'klen/python-mode'
Bundle 'python.vim'
Bundle 'python_match.vim'
Bundle 'pythoncomplete'

" Javascript
Bundle 'leshill/vim-json'
Bundle 'groenewege/vim-less'
Bundle 'pangloss/vim-javascript'
Bundle 'briancollins/vim-jst'
Bundle 'kchmck/vim-coffee-script'

" HTML
Bundle 'amirh/HTML-AutoCloseTag'
Bundle 'hail2u/vim-css3-syntax'

" Ruby
Bundle 'tpope/vim-rails'
let g:rubycomplete_buffer_loading = 1
"let g:rubycomplete_classes_in_global = 1
"let g:rubycomplete_rails = 1

" GO
Bundle 'fsouza/go.vim'
Bundle 'nsf/gocode'

" Node.js
Bundle 'digitaltoad/vim-jade'
Bundle 'myhere/vim-nodejs-complete'
Bundle 'guileen/vim-node'

" Misc
Bundle 'tpope/vim-markdown'
Bundle 'spf13/vim-preview'
Bundle 'tpope/vim-cucumber'
Bundle 'quentindecock/vim-cucumber-align-pipes'
Bundle 'Puppet-Syntax-Highlighting'
